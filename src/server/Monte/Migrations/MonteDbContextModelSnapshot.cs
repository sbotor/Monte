// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monte;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Monte.Migrations
{
    [DbContext(typeof(MonteDbContext))]
    partial class MonteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Monte.Features.Machines.Machine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("HeartbeatDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Monte.Features.Metrics.CoreUsageEntry", b =>
                {
                    b.Property<long>("EntryId")
                        .HasColumnType("bigint");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<double>("PercentUsed")
                        .HasColumnType("double precision");

                    b.HasKey("EntryId", "Ordinal");

                    b.ToTable("CoreUsageEntries");
                });

            modelBuilder.Entity("Monte.Features.Metrics.MetricsEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReportDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("MetricsEntries");
                });

            modelBuilder.Entity("Monte.Features.Machines.Machine", b =>
                {
                    b.OwnsOne("Monte.Features.Machines.Machine+CpuInfo", "Cpu", b1 =>
                        {
                            b1.Property<Guid>("MachineId")
                                .HasColumnType("uuid");

                            b1.Property<int>("LogicalCount")
                                .HasColumnType("integer");

                            b1.Property<double>("MaxFreq")
                                .HasColumnType("double precision");

                            b1.Property<double>("MinFreq")
                                .HasColumnType("double precision");

                            b1.Property<int>("PhysicalCount")
                                .HasColumnType("integer");

                            b1.HasKey("MachineId");

                            b1.ToTable("Machines");

                            b1.WithOwner()
                                .HasForeignKey("MachineId");
                        });

                    b.OwnsOne("Monte.Features.Machines.Machine+MemoryInfo", "Memory", b1 =>
                        {
                            b1.Property<Guid>("MachineId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Swap")
                                .HasColumnType("numeric(20,0)");

                            b1.Property<decimal>("Total")
                                .HasColumnType("numeric(20,0)");

                            b1.HasKey("MachineId");

                            b1.ToTable("Machines");

                            b1.WithOwner()
                                .HasForeignKey("MachineId");
                        });

                    b.Navigation("Cpu")
                        .IsRequired();

                    b.Navigation("Memory")
                        .IsRequired();
                });

            modelBuilder.Entity("Monte.Features.Metrics.CoreUsageEntry", b =>
                {
                    b.HasOne("Monte.Features.Metrics.MetricsEntry", "Entry")
                        .WithMany("Cores")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("Monte.Features.Metrics.MetricsEntry", b =>
                {
                    b.HasOne("Monte.Features.Machines.Machine", null)
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Monte.Features.Metrics.CpuUsageEntry", "Cpu", b1 =>
                        {
                            b1.Property<long>("MetricsEntryId")
                                .HasColumnType("bigint");

                            b1.Property<double>("AveragePercentUsed")
                                .HasColumnType("double precision");

                            b1.Property<double>("Load")
                                .HasColumnType("double precision");

                            b1.HasKey("MetricsEntryId");

                            b1.ToTable("MetricsEntries");

                            b1.WithOwner()
                                .HasForeignKey("MetricsEntryId");
                        });

                    b.OwnsOne("Monte.Features.Metrics.MemoryUsageEntry", "Memory", b1 =>
                        {
                            b1.Property<long>("MetricsEntryId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Available")
                                .HasColumnType("double precision");

                            b1.Property<double>("PercentUsed")
                                .HasColumnType("double precision");

                            b1.Property<double>("SwapAvailable")
                                .HasColumnType("double precision");

                            b1.Property<double>("SwapPercentUsed")
                                .HasColumnType("double precision");

                            b1.HasKey("MetricsEntryId");

                            b1.ToTable("MetricsEntries");

                            b1.WithOwner()
                                .HasForeignKey("MetricsEntryId");
                        });

                    b.Navigation("Cpu")
                        .IsRequired();

                    b.Navigation("Memory")
                        .IsRequired();
                });

            modelBuilder.Entity("Monte.Features.Metrics.MetricsEntry", b =>
                {
                    b.Navigation("Cores");
                });
#pragma warning restore 612, 618
        }
    }
}
